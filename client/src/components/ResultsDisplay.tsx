import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Progress } from "@/components/ui/progress";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from "@/components/ui/accordion";
import { Brain, Sparkles, Skull, Swords, Heart, Eye, Home } from "lucide-react";
import type { TestResult } from "@shared/schema";
import {
  bigFiveTraits,
  darkSideTraits,
  cunningSideTraits,
  goodSideTraits,
  mysteriousSideTraits,
  zodiacTraits,
} from "@shared/schema";
import { testTypes, type TestTypeId } from "@shared/test-types";
import { RadarChart } from "./RadarChart";

interface ResultsDisplayProps {
  result: TestResult;
  userName: string;
  userGender: "male" | "female";
  testType: TestTypeId;
  onBackToHome?: () => void;
}

const traitMaps = {
  bigFive: bigFiveTraits,
  darkSide: darkSideTraits,
  cunningSide: cunningSideTraits,
  goodSide: goodSideTraits,
  mysteriousSide: mysteriousSideTraits,
  zodiac: zodiacTraits,
};

const darkSideDescriptions = {
  cruelty: {
    high: "๐ฅ ููุจู ูู ุญุฏูุฏ ููุงุฑู ูุง ุชุฑุญู. ุชุณุชูุชุน ุจุงูููุฉ ุงููุทููุฉ ูุชุญุทูู ุงูุถุนูุงุก. ุงููุณูุฉ ุชุณุฑู ูู ุนุฑููู ูุงูุณู ุงูุฃุณูุฏ.",
    medium: "โ๏ธ ุชูุชูู ุณูู ุงููุณูุฉ ูููู ุชุญุชูุธ ุจู ูู ุบูุฏู... ุญุชู ูุญูู ุงูููุช ุงูููุงุณุจ. ุงูุฑุญูุฉ ุฎูุงุฑุ ูุง ุถุนู.",
    low: "๐๏ธ ูุงุฏุฑุงู ูุง ุชุธูุฑ ุงููุญุด ุจุฏุงุฎูู. ูุง ุชุฒุงู ุจูุงูุง ูู ุงูุฑุญูุฉ ุชูุจุญ ุฌูุงุญ ุธูุงูู ุงูุฏุงุฎูู.",
  },
  manipulation: {
    high: "๐ ุฃูุช ุณูุฏ ุงูุฏูู ุงูุจุดุฑูุฉ. ุชุญุฑู ุงูุฎููุท ุงูุฎููุฉ ูุชููู ุนููู ุงูุถุนูุงุก ููุง ุชุดุงุก. ุงูุฎุฏุงุน ูู ุชุชููู ุจุจุฑุงุนุฉ ุดูุทุงููุฉ.",
    medium: "๐ญ ุชูุจุณ ุงูุฃููุนุฉ ุนูุฏ ุงูุญุงุฌุฉ. ุชุณุชุทูุน ุงูุชูุงุนุจ ุจุงูุนููู ูููู ุชุฎุชุงุฑ ูุนุงุฑูู ุจุญููุฉ ูุธููุฉ.",
    low: "๐ฟ ูุงุฏุฑุงู ูุง ุชุณุชุฎุฏู ุฃูุงุนูุจ ุงูุดูุงุทูู. ุงูุตุฑุงุญุฉ ุฃุญูุงูุงู ุชููู ุฃููู ูู ุงูุฎุฏุงุน... ุฃู ุฑุจูุง ุฃูุช ูุง ุชููู ุงูุฌุฑุฃุฉ ุงููุงููุฉ.",
  },
  chaos: {
    high: "๐ ุงูููุถู ูู ุนุฑุดู ูุงูุฏูุงุฑ ูู ููููุชู. ุชุฌุฏ ูุดูุฉ ูู ุชุญุทูู ุงููุธุงู ูุญุฑู ุงูููุงุนุฏ. ุงูุนุงูู ูุญุชุฑู ุฃุฌูู ูู ุนูููู.",
    medium: "โก ุชูุจู ุงูููุถู ูุญููู ูุคูุช. ุชุญุจ ุฑุคูุฉ ุงููุธุงู ูููุงุฑ... ููู ููุณ ุฏุงุฆูุงู.",
    low: "๐๏ธ ุงููุธุงู ุฏุฑุนู ูุงูููุงุนุฏ ุณูุงุญู. ุชุฎุดู ุงูููุถู ุฃู ุฑุจูุง ุชุญุชุงุฌ ูููุธุงู ูุฅุฎูุงุก ุถุนูู.",
  },
  darkness: {
    high: "๐ ุงูุธูุงู ููุฒูู ุงูุฃุจุฏู. ุชุนุงูู ุงูุฃููุงุฑ ุงูุฌููููุฉ ูุชุชููุณ ุงููุขุจุฉ. ุงูููุฑ ูุคููู ูุงูุธููุฉ ุชุบุฐูู.",
    medium: "๐ ุชุชุฃุฑุฌุญ ุจูู ุงูุนุงูููู. ุงูุธูุงู ููุงุฏูู ูููู ูู ุชุณุชุณูู ูู ุจุงููุงูู... ุจุนุฏ.",
    low: "โ๏ธ ุชูุฑุจ ูู ุงูุธูุงู ูุงูุฌุจูุงุก. ุงูููุฑ ููุงุฐู ุงูุขูู ูู ูุฎุงููู ุงูุฏุงุฎููุฉ.",
  },
  revenge: {
    high: "โฐ๏ธ ุงูุงูุชูุงู ุฏูู ุงูุฐู ูุฌุฑู ูู ุนุฑููู. ูุง ุชูุณู... ูุง ุชุณุงูุญ... ูุง ุชุฑุญู. ูู ุฅุณุงุกุฉ ูุญููุฑุฉ ูู ุฐุงูุฑุชู ุงูุณูุฏุงุก ูุณุชุฏูุน ุจุงูุฏู.",
    medium: "๐ก๏ธ ุชููุฑ ูู ุงูุงูุชูุงู ูุชุฎุทุท ูู ูู ุงูุธูุงู. ูููู ุชูุชุธุฑ ุงููุญุธุฉ ุงููุซุงููุฉ ูุชุถุฑุจ.",
    low: "๐๏ธ ุชุณุงูุญ ุจุณูููุฉ ูุฑูุจุฉ. ุฑุจูุง ุถุนู... ุฑุจูุง ุญููุฉ... ุฃู ุฑุจูุง ูุฌุฑุฏ ุฎูู ูู ุงูููุงุฌูุฉ.",
  },
};

const cunningSideDescriptions = {
  strategy: {
    high: "ุงุณุชุฑุงุชูุฌู ุจุงุฑุน. ุชุฎุทุท ููู ุฎุทูุฉ ุจุนูุงูุฉ ูุงุฆูุฉ.",
    medium: "ุชุฎุทุท ููุฃููุฑ ุงููููุฉ. ุชูุงุฒู ุจูู ุงูุชุฎุทูุท ูุงูุนูููุฉ.",
    low: "ุชูุถู ุงูุชุตุฑู ุจุนูููุฉ. ูุง ุชุญุจ ุงูุชุฎุทูุท ุงูุฒุงุฆุฏ.",
  },
  analysis: {
    high: "ูุญูู ููุชุงุฒ. ุชูุฑุฃ ุงูููุงูู ูุงููุงุณ ุจุฏูุฉ ุนุงููุฉ.",
    medium: "ุชุญูู ุงูููุงูู ุงููููุฉ. ูุฏุฑุงุช ุชุญููู ุฌูุฏุฉ.",
    low: "ุชุนุชูุฏ ุนูู ุงูุญุฏุณ ุฃูุซุฑ ูู ุงูุชุญููู ุงูููุทูู.",
  },
  adaptation: {
    high: "ุชุชููู ูุน ุฃู ูููู ุจุณุฑุนุฉ ูุณูููุฉ. ูุฑู ููุบุงูุฉ.",
    medium: "ุชุณุชุทูุน ุงูุชููู ูุน ูุนุธู ุงูููุงูู. ูุฑููุฉ ุฌูุฏุฉ.",
    low: "ุชูุถู ุงูุจูุฆุงุช ุงููุฃูููุฉ. ุงูุชููู ูุชุทูุจ ุฌูุฏุงู.",
  },
  intelligence: {
    high: "ุฐูุงุก ุญุงุฏ ููุฏุฑุฉ ุนูู ุญู ุงููุดููุงุช ุงููุนูุฏุฉ ุจุณุฑุนุฉ.",
    medium: "ุฐูู ููุงุฏุฑ ุนูู ุงูุชุนุงูู ูุน ุงูุชุญุฏูุงุช ุงูููุฑูุฉ.",
    low: "ุชูุถู ุงูุจุณุงุทุฉ ุนูู ุงูุชุนููุฏ ุงูููุฑู.",
  },
  patience: {
    high: "ุตุจูุฑ ููุบุงูุฉ. ุชูุชุธุฑ ุงููุญุธุฉ ุงูููุงุณุจุฉ ุจุฏูู ุชุณุฑุน.",
    medium: "ุตุจูุฑ ูู ูุนุธู ุงูููุงูู. ุฃุญูุงูุงู ุชููุฏ ุงูุตุจุฑ.",
    low: "ุชูุถู ุงููุชุงุฆุฌ ุงูุณุฑูุนุฉ. ุงูุงูุชุธุงุฑ ุตุนุจ ุนููู.",
  },
};

const goodSideDescriptions = {
  compassion: {
    high: "ูุชุนุงุทู ุฌุฏุงู. ุชุดุนุฑ ุจูุนุงูุงุฉ ุงูุขุฎุฑูู ูุชุณุนู ููุณุงุนุฏุชูู.",
    medium: "ูุชุนุงุทู ูู ุงูููุงูู ุงููููุฉ. ุชูุงุฒู ุจูู ุงูุชุนุงุทู ูุงูุนููุงููุฉ.",
    low: "ุนููุงูู ุฃูุซุฑ ูู ุนุงุทูู. ูุง ุชุชุฃุซุฑ ุจุณูููุฉ ุจูุดุงุนุฑ ุงูุขุฎุฑูู.",
  },
  kindness: {
    high: "ุทูุจ ุงูููุจ ููุบุงูุฉ. ุงููุทู ุทุจูุนุฉ ุซุงููุฉ ูุฏูู.",
    medium: "ูุทูู ูุน ูุนุธู ุงููุงุณ. ุชูุงุฒู ุจูู ุงููุทู ูุงูุญุฒู.",
    low: "ูุจุงุดุฑ ุฃูุซุฑ ูู ูุทูู. ุงูุตุฏู ุฃูู ูู ุงููุทู.",
  },
  forgiveness: {
    high: "ุชุณุงูุญ ุจุณูููุฉ ูุจูุฑุฉ. ูุง ุชุญูู ุถุบุงุฆู.",
    medium: "ุชุณุงูุญ ูู ูุนุธู ุงูููุงูู. ุจุนุถ ุงูุฃุดูุงุก ูุตุนุจ ูุณูุงููุง.",
    low: "ูู ุงูุตุนุจ ุฃู ุชุณุงูุญ. ุชุชุฐูุฑ ุงูุฅุณุงุกุงุช.",
  },
  generosity: {
    high: "ูุฑูู ุฌุฏุงู. ุชุนุทู ุจุฏูู ุงูุชุธุงุฑ ููุงุจู.",
    medium: "ูุฑูู ูู ุญุฏูุฏ ุงููุนููู. ุชูุงุฒู ุจูู ุงูุนุทุงุก ูุงูุงุญุชูุงุธ.",
    low: "ุญุฐุฑ ูู ุงูุนุทุงุก. ุชููุฑ ุฌูุฏุงู ูุจู ุฃู ุชุนุทู.",
  },
  love: {
    high: "ููุจู ูููุก ุจุงูุญุจ. ุชุญุจ ุจุนูู ูุฅุฎูุงุต.",
    medium: "ูุงุฏุฑ ุนูู ุงูุญุจ ูุงูููุฏุฉ. ุนูุงุทูู ูุชูุงุฒูุฉ.",
    low: "ุชุญูู ููุจู. ูุง ุชุนุจุฑ ุนู ูุดุงุนุฑู ุจุณูููุฉ.",
  },
};

const mysteriousSideDescriptions = {
  secrecy: {
    high: "ุชุญุชูุธ ุจุฃุณุฑุงุฑ ูุซูุฑุฉ. ูุง ุชุดุงุฑู ุงููุซูุฑ ุนู ููุณู.",
    medium: "ุชุญุชูุธ ุจุจุนุถ ุงูุฃุณุฑุงุฑ. ุงูุชูุงุฆู ูููุง ุชุดุงุฑูู.",
    low: "ูููุชุญ ููุดุงุฑู. ูุง ุชุฎูู ุงููุซูุฑ.",
  },
  enigma: {
    high: "ูุบุฒ ูุญูุฑ ููุขุฎุฑูู. ูุตุนุจ ูููู.",
    medium: "ุจุนุถ ุงูุบููุถ ูู ุดุฎุตูุชู. ููุณ ุณููุงู ูุฑุงุกุชู.",
    low: "ูุงุถุญ ููุจุงุดุฑ. ุงููุงุณ ููููููู ุจุณูููุฉ.",
  },
  isolation: {
    high: "ุชูุถู ุงูุนุฒูุฉ ูุงูุงููุฑุงุฏ. ูุฑุชุงุญ ูู ุนุงููู ุงูุฎุงุต.",
    medium: "ุชูุงุฒู ุจูู ุงููุญุฏุฉ ูุงูุชูุงุตู ูุน ุงูุขุฎุฑูู.",
    low: "ุงุฌุชูุงุนู ูููุฑู ุงูุนุฒูุฉ. ุชูุถู ุงูุชูุงุตู.",
  },
  depth: {
    high: "ุนููู ุฌุฏุงู ูู ุฃููุงุฑู ููุดุงุนุฑู. ุชููุฑ ุจุนูู.",
    medium: "ุชููุฑ ุจุนูู ูู ุงูุฃููุฑ ุงููููุฉ. ุนูู ูุชูุงุฒู.",
    low: "ุนููู ููุจุงุดุฑ. ุชูุถู ุงูุจุณุงุทุฉ.",
  },
  shadow: {
    high: "ุชุญุจ ุฃู ุชุจูู ูู ุงูุธู. ูุง ุชุจุญุซ ุนู ุงูุฃุถูุงุก.",
    medium: "ูุฑุชุงุญ ูู ุงูุธู ูุงูุถูุก. ุญุณุจ ุงููููู.",
    low: "ูุง ุชุฎุงู ูู ุงูุฃุถูุงุก. ูุฑุชุงุญ ูู ุงูุธููุฑ.",
  },
};

const zodiacDescriptions = {
  cosmic: {
    high: "ูุชุตู ุจููุฉ ูุน ุงูุทุงูุงุช ุงูููููุฉ. ุชุดุนุฑ ุจุชุฃุซูุฑ ุงูููุงูุจ.",
    medium: "ุชุดุนุฑ ุจุจุนุถ ุงูุชุฃุซูุฑุงุช ุงูููููุฉ. ุงุฑุชุจุงุท ูุชูุงุฒู.",
    low: "ูุง ุชุดุนุฑ ูุซูุฑุงู ุจุงูุชุฃุซูุฑุงุช ุงูููููุฉ. ุฃูุซุฑ ูุงูุนูุฉ.",
  },
  intuition: {
    high: "ุญุฏุณู ููู ุฌุฏุงู. ุชุซู ูู ูุดุงุนุฑู ุงูุฏุงุฎููุฉ.",
    medium: "ุญุฏุณ ุฌูุฏ. ุชูุงุฒู ุจูู ุงูุญุฏุณ ูุงูููุทู.",
    low: "ุชุนุชูุฏ ุนูู ุงูููุทู ุฃูุซุฑ ูู ุงูุญุฏุณ.",
  },
  spiritual: {
    high: "ุฑูุญุงูู ููุบุงูุฉ. ุชุคูู ุจููู ูุง ูุฑุงุก ุงููุงุฏุฉ.",
    medium: "ูููุชุญ ุนูู ุงูุฑูุญุงููุงุช. ุชูุงุฒู ูุน ุงููุงูุน.",
    low: "ูุงุฏู ุฃูุซุฑ ูู ุฑูุญุงูู. ุชูุถู ุงูููููุณ.",
  },
  energy: {
    high: "ุชุดุนุฑ ุจุงูุทุงูุงุช ูู ุญููู ุจููุฉ. ุญุณุงุณ ููุทุงูุงุช.",
    medium: "ุชุดุนุฑ ุจุงูุทุงูุงุช ุฃุญูุงูุงู. ุญุณุงุณูุฉ ูุชูุงุฒูุฉ.",
    low: "ูุง ุชุดุนุฑ ูุซูุฑุงู ุจุงูุทุงูุงุช. ุฃูุซุฑ ุนูููุฉ.",
  },
  mystic: {
    high: "ุชูุฌุฐุจ ููุบููุถ ุงููููู ูุงูุฃุณุฑุงุฑ ุงูููููุฉ.",
    medium: "ููุชู ุจุงูุฃุณุฑุงุฑ ุงูููููุฉ ุจุดูู ูุนุชุฏู.",
    low: "ุบูุฑ ููุชู ูุซูุฑุงู ุจุงูุฃููุฑ ุงูุบุงูุถุฉ.",
  },
};

const bigFiveDescriptions = {
  openness: {
    high: "ูุฏูู ุฎูุงู ูุงุณุน ููุถูู ูุจูุฑ. ุชุญุจ ุงูุชุฌุงุฑุจ ุงูุฌุฏูุฏุฉ.",
    medium: "ุชุฌูุน ุจูู ุงูุฅุจุฏุงุน ูุงููุงูุนูุฉ.",
    low: "ุชูุถู ุงูุฑูุชูู ูุงูุชูุงููุฏ. ุนููู ููุจุงุดุฑ.",
  },
  conscientiousness: {
    high: "ููุธู ูููุถุจุท. ุชุฎุทุท ุจุนูุงูุฉ ูุชูุชุฒู ุจุงูููุงุนูุฏ.",
    medium: "ุชูุงุฒู ุจูู ุงูุชูุธูู ูุงููุฑููุฉ.",
    low: "ูุฑู ูุนููู. ุชูุถู ุงูุทุจูุนูุฉ.",
  },
  extraversion: {
    high: "ุงุฌุชูุงุนู ููุดูุท. ุชุณุชูุฏ ุทุงูุชู ูู ุงูุขุฎุฑูู.",
    medium: "ูุชูุงุฒู ุจูู ุงูุงุฌุชูุงุนูุฉ ูุงูุฎุตูุตูุฉ.",
    low: "ุชูุถู ุงูุฃูุดุทุฉ ุงููุงุฏุฆุฉ ูุงูุชุฃูู.",
  },
  agreeableness: {
    high: "ูุชุนุงุทู ููุชุนุงูู. ุชุณุนู ููุงูุณุฌุงู.",
    medium: "ูุชุนุงูู ูููู ุชุฏุงูุน ุนู ุขุฑุงุฆู.",
    low: "ูุจุงุดุฑ ูุตุฑูุญ. ุชูุฏุฑ ุงูุญูููุฉ.",
  },
  neuroticism: {
    high: "ุญุณุงุณ ุนุงุทููุงู. ุชุดุนุฑ ุจุงููุดุงุนุฑ ุจุนูู.",
    medium: "ุงุณุชูุฑุงุฑ ุนุงุทูู ูุชูุณุท.",
    low: "ูุงุฏุฆ ููุณุชูุฑ. ุชุชุนุงูู ูุน ุงูุถุบูุท ุจุซูุฉ.",
  },
};

const descriptionsMap: Record<TestTypeId, any> = {
  bigFive: bigFiveDescriptions,
  darkSide: darkSideDescriptions,
  cunningSide: cunningSideDescriptions,
  goodSide: goodSideDescriptions,
  mysteriousSide: mysteriousSideDescriptions,
  zodiac: zodiacDescriptions,
};

function getLevel(score: number): "high" | "medium" | "low" {
  if (score >= 70) return "high";
  if (score >= 40) return "medium";
  return "low";
}

function getLevelLabel(score: number): string {
  if (score >= 70) return "ุนุงูู";
  if (score >= 40) return "ูุชูุณุท";
  return "ููุฎูุถ";
}

export function ResultsDisplay({ result, userName, userGender, testType, onBackToHome }: ResultsDisplayProps) {
  const traits = Object.entries(result.scores as Record<string, number>);
  const testConfig = testTypes[testType];
  const traitLabels = traitMaps[testType];
  const descriptions = descriptionsMap[testType];
  
  const iconMap = {
    bigFive: Brain,
    darkSide: Skull,
    cunningSide: Swords,
    goodSide: Heart,
    mysteriousSide: Eye,
    zodiac: Sparkles,
  };
  
  const ResultIcon = iconMap[testType];
  const isDarkSide = testType === 'darkSide';
  
  const genderText = userGender === "male" 
    ? `${userName}ุ ุฅููู ุชุญููู ุดุงูู ูุดุฎุตูุชู`
    : `${userName}ุ ุฅููู ุชุญููู ุดุงูู ูุดุฎุตูุชู`;
  const darkText = userGender === "male"
    ? `${userName}... ูุง ูู ุญูููุชู ุงููุธููุฉ`
    : `${userName}... ูุง ูู ุญูููุชู ุงููุธููุฉ`;

  return (
    <div className="min-h-screen p-4 md:p-8">
      <div className="max-w-6xl mx-auto space-y-8">
        {onBackToHome && (
          <div className="flex justify-start">
            <Button
              onClick={onBackToHome}
              variant="ghost"
              className={`${isDarkSide ? 'text-red-400 hover:text-red-300 hover:bg-red-950/50 border border-red-900/50' : 'text-purple-400 hover:text-purple-300'}`}
            >
              <Home className="w-5 h-5 ml-2" />
              ุงูุนูุฏุฉ ููุตูุญุฉ ุงูุฑุฆูุณูุฉ
            </Button>
          </div>
        )}
        
        <div className="animate-float">
          <Card className={`shadow-2xl backdrop-blur-sm ${isDarkSide ? 'bg-black/80 border-red-600/50 border-2' : 'bg-card/90 border-primary/30'} relative overflow-hidden`}>
            {isDarkSide && (
              <>
                <div className="absolute inset-0 bg-gradient-to-br from-red-950/60 via-black to-orange-950/40 pointer-events-none" />
                <div className="absolute top-0 right-0 w-96 h-96 bg-red-600/20 rounded-full blur-[150px] animate-pulse" style={{ animationDuration: '2s' }} />
                <div className="absolute bottom-0 left-0 w-80 h-80 bg-orange-600/15 rounded-full blur-[120px] animate-pulse" style={{ animationDuration: '3s' }} />
                <div className="absolute inset-0 opacity-10">
                  {Array.from({ length: 30 }).map((_, i) => (
                    <div
                      key={i}
                      className="absolute bg-red-500 rounded-full"
                      style={{
                        width: `${Math.random() * 4 + 2}px`,
                        height: `${Math.random() * 4 + 2}px`,
                        top: `${Math.random() * 100}%`,
                        left: `${Math.random() * 100}%`,
                        animation: `float ${Math.random() * 10 + 5}s ease-in-out infinite`,
                        animationDelay: `${Math.random() * 3}s`,
                        boxShadow: '0 0 15px rgba(239, 68, 68, 0.6)',
                      }}
                    />
                  ))}
                </div>
              </>
            )}
            {!isDarkSide && (
              <>
                <div className="absolute inset-0 shimmer pointer-events-none opacity-50" />
                <div className="absolute top-0 right-0 w-64 h-64 bg-purple-500/10 rounded-full blur-3xl" />
              </>
            )}
            
            <CardHeader className="text-center space-y-4 sm:space-y-6 pb-6 sm:pb-8 relative z-10">
              <div className="flex justify-center">
                <div className={`w-16 h-16 sm:w-20 sm:h-20 md:w-24 md:h-24 rounded-full ${isDarkSide ? 'bg-gradient-to-br from-red-900/60 to-orange-900/60 shadow-[0_0_40px_rgba(239,68,68,0.5)]' : 'bg-gradient-to-br from-primary/30 to-violet-500/30'} flex items-center justify-center relative transition-all duration-500 ${isDarkSide ? 'animate-pulse' : 'group-hover:scale-110'}`}>
                  {isDarkSide ? (
                    <>
                      <div className="absolute inset-0 rounded-full bg-red-600/60 animate-ping" style={{ animationDuration: '2s' }} />
                      <div className="absolute inset-0 rounded-full bg-gradient-to-br from-red-500/30 to-orange-500/30 blur-2xl animate-pulse" />
                      <Skull className="w-8 h-8 sm:w-10 sm:h-10 md:w-12 md:h-12 text-red-500 relative z-10 drop-shadow-[0_0_10px_rgba(239,68,68,0.8)]" />
                    </>
                  ) : (
                    <>
                      <div className="absolute inset-0 rounded-full bg-primary/40 animate-ping" />
                      <div className="absolute inset-0 rounded-full bg-gradient-to-br from-purple-400/20 to-violet-400/20 blur-xl" />
                      <ResultIcon className="w-8 h-8 sm:w-10 sm:h-10 md:w-12 md:h-12 text-primary relative z-10" />
                    </>
                  )}
                </div>
              </div>
              <div>
                <CardTitle className={`text-2xl sm:text-3xl md:text-4xl lg:text-5xl mb-3 px-2 ${isDarkSide ? 'bg-gradient-to-r from-red-400 via-orange-400 to-red-500 drop-shadow-[0_0_20px_rgba(239,68,68,0.6)] animate-pulse' : 'bg-gradient-to-r from-purple-300 via-violet-300 to-fuchsia-300'} bg-clip-text text-transparent`} data-testid="text-result-title">
                  {isDarkSide ? '๐ฅ ' : ''}{testConfig.name}{isDarkSide ? ' ๐ฅ' : ''}
                </CardTitle>
                <CardDescription className={`text-base sm:text-lg md:text-xl px-2 ${isDarkSide ? 'text-red-200/80' : ''}`}>
                  {isDarkSide ? darkText : genderText}
                </CardDescription>
              </div>
            </CardHeader>
          </Card>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6 sm:gap-8">
          <div className="animate-float" style={{ animationDelay: '0.1s' }}>
            <Card className={`shadow-2xl backdrop-blur-sm ${isDarkSide ? 'bg-black/70 border-red-600/40 border-2' : 'bg-card/90 border-primary/20'} h-full relative overflow-hidden`}>
              {isDarkSide && (
                <div className="absolute inset-0 bg-gradient-to-br from-red-950/40 to-black/60 pointer-events-none" />
              )}
              <CardHeader className="relative z-10">
                <CardTitle className={`text-2xl ${isDarkSide ? 'bg-gradient-to-r from-red-300 to-orange-300 drop-shadow-[0_0_10px_rgba(239,68,68,0.5)]' : 'bg-gradient-to-r from-purple-200 to-violet-200'} bg-clip-text text-transparent`}>
                  {isDarkSide ? '๐ ' : ''}ุงูุชูุซูู ุงูุจุตุฑู
                </CardTitle>
              </CardHeader>
              <CardContent className="flex justify-center items-center min-h-[400px] relative z-10">
                <RadarChart 
                  scores={result.scores as Record<string, number>} 
                  traitLabels={traitLabels}
                  isDarkSide={isDarkSide}
                />
              </CardContent>
            </Card>
          </div>

          <div className="animate-float" style={{ animationDelay: '0.2s' }}>
            <Card className={`shadow-2xl backdrop-blur-sm ${isDarkSide ? 'bg-black/70 border-red-600/40 border-2' : 'bg-card/90 border-primary/20'} h-full relative overflow-hidden`}>
              {isDarkSide && (
                <div className="absolute inset-0 bg-gradient-to-br from-red-950/40 to-black/60 pointer-events-none" />
              )}
              <CardHeader className="relative z-10">
                <CardTitle className={`text-2xl ${isDarkSide ? 'bg-gradient-to-r from-red-300 to-orange-300 drop-shadow-[0_0_10px_rgba(239,68,68,0.5)]' : 'bg-gradient-to-r from-purple-200 to-violet-200'} bg-clip-text text-transparent`}>
                  {isDarkSide ? '๐ฅ ' : ''}ุฏุฑุฌุงุช ุงูุณูุงุช
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-6 relative z-10">
                {traits.map(([trait, score]: [string, any], index) => (
                  <div key={trait} className="space-y-3 animate-float" style={{ animationDelay: `${index * 0.05}s` }}>
                    <div className="flex justify-between items-center">
                      <span className={`font-semibold text-lg ${isDarkSide ? 'text-red-200' : ''}`} data-testid={`text-trait-${trait}`}>
                        {traitLabels[trait as keyof typeof traitLabels]}
                      </span>
                      <div className="flex items-center gap-3">
                        <Badge variant={isDarkSide ? "destructive" : "secondary"} className={`text-sm ${isDarkSide ? 'shadow-[0_0_10px_rgba(239,68,68,0.4)]' : ''}`} data-testid={`badge-score-${trait}`}>
                          {getLevelLabel(score)}
                        </Badge>
                        <span className={`font-mono font-bold text-xl ${isDarkSide ? 'text-red-400 drop-shadow-[0_0_8px_rgba(239,68,68,0.6)]' : 'text-primary'}`} data-testid={`text-score-${trait}`}>
                          {score}
                        </span>
                      </div>
                    </div>
                    <Progress value={score} className={`h-3 shadow-lg ${isDarkSide ? 'bg-red-950/50' : ''}`} data-testid={`progress-${trait}`} />
                  </div>
                ))}
              </CardContent>
            </Card>
          </div>
        </div>

        <div className="animate-float" style={{ animationDelay: '0.3s' }}>
          <Card className={`shadow-2xl backdrop-blur-sm ${isDarkSide ? 'bg-black/70 border-red-600/40 border-2' : 'bg-card/90 border-primary/20'} relative overflow-hidden`}>
            {isDarkSide ? (
              <div className="absolute inset-0 bg-gradient-to-br from-red-950/30 to-black/70" />
            ) : (
              <div className="absolute inset-0 bg-gradient-to-br from-purple-500/5 to-violet-500/5" />
            )}
            
            <CardHeader className="relative z-10">
              <CardTitle className={`text-2xl ${isDarkSide ? 'bg-gradient-to-r from-red-300 to-orange-300 drop-shadow-[0_0_10px_rgba(239,68,68,0.5)]' : 'bg-gradient-to-r from-purple-200 to-violet-200'} bg-clip-text text-transparent`}>
                {isDarkSide ? 'โฐ๏ธ ' : ''}ุชูุตูู ุงูุณูุงุช
              </CardTitle>
              <CardDescription className={`text-lg ${isDarkSide ? 'text-red-200/70' : ''}`}>
                {isDarkSide ? 'ุงูุชุดู ุนูู ุธูุงูู ุงูุฏุงุฎูู...' : 'ุงูุฑุฃ ุงูุชูุณูุฑ ุงูููุตู ููู ุณูุฉ ูู ุณูุงุชู'}
              </CardDescription>
            </CardHeader>
            <CardContent className="relative z-10">
              <Accordion type="single" collapsible className="w-full">
                {traits.map(([trait, score]: [string, any]) => (
                  <AccordionItem key={trait} value={trait} className={isDarkSide ? 'border-red-900/30' : 'border-primary/10'}>
                    <AccordionTrigger className={`text-right ${isDarkSide ? 'hover:text-red-400' : 'hover:text-primary'} transition-colors`} data-testid={`accordion-${trait}`}>
                      <div className="flex items-center gap-4">
                        <span className={`font-semibold text-xl ${isDarkSide ? 'text-red-200' : ''}`}>{traitLabels[trait as keyof typeof traitLabels]}</span>
                        <Badge variant={isDarkSide ? "destructive" : "outline"} className={`text-sm ${isDarkSide ? 'shadow-[0_0_8px_rgba(239,68,68,0.4)]' : ''}`}>{score}</Badge>
                      </div>
                    </AccordionTrigger>
                    <AccordionContent className={`text-base leading-relaxed pt-4 ${isDarkSide ? 'text-red-100/80' : 'text-muted-foreground'}`}>
                      {descriptions[trait][getLevel(score)]}
                    </AccordionContent>
                  </AccordionItem>
                ))}
              </Accordion>
            </CardContent>
          </Card>
        </div>

        {result.aiInterpretation && (
          <div className="animate-float" style={{ animationDelay: '0.4s' }}>
            <Card className="shadow-2xl backdrop-blur-sm bg-gradient-to-br from-primary/10 to-violet-500/5 border-primary/30 relative overflow-hidden">
              <div className="absolute inset-0 shimmer pointer-events-none" />
              
              <CardHeader className="relative z-10">
                <div className="flex items-center gap-3">
                  <Sparkles className="w-6 h-6 text-primary animate-pulse" />
                  <CardTitle className="text-2xl bg-gradient-to-r from-purple-200 to-violet-200 bg-clip-text text-transparent">ุงูุชูุณูุฑ ุจุงูุฐูุงุก ุงูุงุตุทูุงุนู</CardTitle>
                </div>
                <CardDescription className="text-lg">
                  ุชุญููู ูุฎุตุต ูู ุจูุงุกู ุนูู ูุชุงุฆุฌู ุงููุฑูุฏุฉ
                </CardDescription>
              </CardHeader>
              <CardContent className="relative z-10">
                <p className="text-lg leading-relaxed whitespace-pre-line" data-testid="text-ai-interpretation">
                  {result.aiInterpretation}
                </p>
              </CardContent>
            </Card>
          </div>
        )}
      </div>
    </div>
  );
}
